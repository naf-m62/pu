// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.2
// source: grpc/proto/public/user.grpc.public.proto

package userpublic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCPublicClient is the client API for GRPCPublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCPublicClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
}

type gRPCPublicClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCPublicClient(cc grpc.ClientConnInterface) GRPCPublicClient {
	return &gRPCPublicClient{cc}
}

func (c *gRPCPublicClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userpublic.GRPCPublic/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCPublicClient) AuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userpublic.GRPCPublic/AuthUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCPublicClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userpublic.GRPCPublic/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCPublicServer is the server API for GRPCPublic service.
// All implementations must embed UnimplementedGRPCPublicServer
// for forward compatibility
type GRPCPublicServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	AuthUser(context.Context, *AuthUserRequest) (*User, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	mustEmbedUnimplementedGRPCPublicServer()
}

// UnimplementedGRPCPublicServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCPublicServer struct {
}

func (UnimplementedGRPCPublicServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGRPCPublicServer) AuthUser(context.Context, *AuthUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}
func (UnimplementedGRPCPublicServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedGRPCPublicServer) mustEmbedUnimplementedGRPCPublicServer() {}

// UnsafeGRPCPublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCPublicServer will
// result in compilation errors.
type UnsafeGRPCPublicServer interface {
	mustEmbedUnimplementedGRPCPublicServer()
}

func RegisterGRPCPublicServer(s grpc.ServiceRegistrar, srv GRPCPublicServer) {
	s.RegisterService(&GRPCPublic_ServiceDesc, srv)
}

func _GRPCPublic_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCPublicServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpublic.GRPCPublic/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCPublicServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCPublic_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCPublicServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpublic.GRPCPublic/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCPublicServer).AuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCPublic_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCPublicServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpublic.GRPCPublic/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCPublicServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCPublic_ServiceDesc is the grpc.ServiceDesc for GRPCPublic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCPublic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userpublic.GRPCPublic",
	HandlerType: (*GRPCPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _GRPCPublic_CreateUser_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _GRPCPublic_AuthUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _GRPCPublic_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/public/user.grpc.public.proto",
}
