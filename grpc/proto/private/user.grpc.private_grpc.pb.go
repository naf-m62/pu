// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.2
// source: grpc/proto/private/user.grpc.private.proto

package userprivate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCPrivateClient is the client API for GRPCPrivate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCPrivateClient interface {
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
}

type gRPCPrivateClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCPrivateClient(cc grpc.ClientConnInterface) GRPCPrivateClient {
	return &gRPCPrivateClient{cc}
}

func (c *gRPCPrivateClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/userprivate.GRPCPrivate/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCPrivateServer is the server API for GRPCPrivate service.
// All implementations must embed UnimplementedGRPCPrivateServer
// for forward compatibility
type GRPCPrivateServer interface {
	GetUser(context.Context, *GetUserRequest) (*User, error)
	mustEmbedUnimplementedGRPCPrivateServer()
}

// UnimplementedGRPCPrivateServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCPrivateServer struct {
}

func (UnimplementedGRPCPrivateServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedGRPCPrivateServer) mustEmbedUnimplementedGRPCPrivateServer() {}

// UnsafeGRPCPrivateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCPrivateServer will
// result in compilation errors.
type UnsafeGRPCPrivateServer interface {
	mustEmbedUnimplementedGRPCPrivateServer()
}

func RegisterGRPCPrivateServer(s grpc.ServiceRegistrar, srv GRPCPrivateServer) {
	s.RegisterService(&GRPCPrivate_ServiceDesc, srv)
}

func _GRPCPrivate_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCPrivateServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userprivate.GRPCPrivate/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCPrivateServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCPrivate_ServiceDesc is the grpc.ServiceDesc for GRPCPrivate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCPrivate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userprivate.GRPCPrivate",
	HandlerType: (*GRPCPrivateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _GRPCPrivate_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/private/user.grpc.private.proto",
}
